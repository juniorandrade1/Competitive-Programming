#include <bits/stdc++.h>

using namespace std;

typedef long long ll;

const ll MOD = 1e9 + 7LL;

inline ll addMod(ll a, ll b, ll md = MOD) {
	a += b;
	if(a >= md) a -= md;
	return a;
}

const int N = 100010;

int n;
ll v[N];
ll allProd;
map< int, int > dp[N];

int func(int pos, int vl) {
	if(pos == n) return (vl == 1);
	if(dp[pos].find(vl) != dp[pos].end()) return dp[pos][vl];
	dp[pos][vl] = func(pos + 1, vl);
	if(vl % v[pos] == 0) dp[pos][vl] = addMod(dp[pos][vl], func(pos + 1, vl / v[pos]));
	return dp[pos][vl];
}

int main() {
	allProd = 1;
	scanf("%d", &n);
	for(int i = 0; i < n; ++i) {
		scanf("%lld", v + i);
		allProd *= v[i];
	}
	ll ans = 0;
	if(allProd == 1) {
		ans = 1;
		for(int i = 0; i < n; ++i) ans = addMod(ans, ans);
		ans = addMod(ans, MOD - 1);
	}
	else {
		for(int i = 1; i * i <= allProd; ++i) ans = addMod(ans, func(0, i * i));
		ans = addMod(ans, MOD - 1);
	}
	printf("%lld\n", ans);
	return 0;
}